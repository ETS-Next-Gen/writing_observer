name: Publish to PyPI

on:
  push:
    branches:
      - berickson/versioning-workflow  # Trigger the workflow on a push to the master branch

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: ['learning_observer', 'modules/writing_observer']  # List all your package directories here
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Check if VERSION file for the current package exists
      - name: Check if VERSION file exists for ${{ matrix.package }}
        id: check_version_exists
        run: |
          if [ -f "${{ matrix.package }}/VERSION" ]; then
            echo "VERSION file exists for ${{ matrix.package }}."
            git diff --exit-code ${{ matrix.package }}/VERSION
            if [ $? -eq 0 ]; then
              echo "No changes detected in VERSION file for ${{ matrix.package }}."
              echo "changed=false" >> $GITHUB_ENV
            else
              echo "Changes detected in VERSION file for ${{ matrix.package }}."
              echo "changed=true" >> $GITHUB_ENV
            fi
          else
            echo "VERSION file does not exist for ${{ matrix.package }}. Skipping build and publish."
            echo "changed=false" >> $GITHUB_ENV
          fi

      # Exit early if no VERSION file exists or if there are no changes
      - name: Exit early if no changes
        if: env.changed == 'false'
        run: echo "No VERSION file or no changes detected for ${{ matrix.package }}. Skipping build and publish."

      # Set up Python environment (only if VERSION file exists and changed)
      - name: Set up Python
        if: env.changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install build tool and dependencies (only if VERSION file exists and changed)
      - name: Install build tool and dependencies
        if: env.changed == 'true'
        run: |
          pip install --upgrade pip
          pip install build twine  # Install build and twine for packaging and publishing

      - name: Test echo command ${{ matrix.package }}
        if: env.changed == 'true'
        env:
        run: |
          echo "WE MADE IT HERE WITH ${{ matrix.package }}"

      # Build distribution and Publish to PyPI for ${{ matrix.package }} (only if VERSION file exists and changed)
      # For now we upload to testpypi while testing the workflow
      # - name: Build distribution and Publish to PyPI for ${{ matrix.package }}
      #   if: env.changed == 'true'
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     cd ${{ matrix.package }}  # Navigate to the package directory
      #     python -m build  # Build distribution files using pyproject.toml
      #     twine upload -r testpypi dist/*  # Upload to PyPI
